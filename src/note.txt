// src/bootstrap.ts

import { createServer } from './server';
import env from './env';
import db from './db/db';
import { logger } from './utils/logger';
import type { Express } from 'express';
import http from 'http';

export async function bootstrap(): Promise<void> {
  try {
    // Step 1: Test DB Connection
    logger.info('üîå Connecting to database...');
    await db.$connect();
    logger.info('‚úÖ Database connected');

    // Step 2: Create Server
    const app: Express = createServer();
    const server = http.createServer(app);

    // Step 3: Cek port (kalau sudah dipakai, akan error di listen)
    server.listen(env.APP_PORT, () => {
      logger.info(`üöÄ Server is running on port ${env.APP_PORT}`);
    });

    // Step 4: Handle graceful shutdown
    const shutdown = async () => {
      logger.info('üßπ Shutting down gracefully...');
      await db.$disconnect();
      server.close(() => {
        logger.info('‚úÖ Server closed');
        process.exit(0);
      });
    };

    process.on('SIGINT', shutdown);
    process.on('SIGTERM', shutdown);
    process.on('uncaughtException', (err) => {
      logger.error('‚ùå Uncaught Exception:', err);
      process.exit(1);
    });

  } catch (err: any) {
    logger.error('‚ùå Failed to start application:', err.message || err);
    process.exit(1);
  }
}




////////////////////////////////////////////////////









// src/db/db.ts
import { PrismaClient } from '@prisma/client';

const db = new PrismaClient({
  log: ['error', 'warn'], // tambahkan log opsional
});

export default db;
